# encoding: utf-8
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
PORT = int(os.getenv("PORT", 8000))

logger.info(f"Starting polling bot with token: {API_TOKEN[:10] if API_TOKEN else 'None'}...")

if not API_TOKEN:
    logger.error("TELEGRAM_API_TOKEN is missing!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logger.info("Bot and Dispatcher initialized successfully")

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    logger.info(f"Received /start from user {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å polling!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    logger.info(f"Received text: '{message.text}' from user {message.from_user.id}")
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
@dp.message_handler(commands=["test"])
async def test_command(message: types.Message):
    logger.info(f"Received /test from user {message.from_user.id}")
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
@dp.message_handler(commands=["ping"])
async def ping_command(message: types.Message):
    logger.info(f"Received /ping from user {message.from_user.id}")
    await message.answer("üèì Pong! –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç!")

async def main():
    logger.info("Starting polling bot...")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook()
    logger.info("Deleted webhook")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    logger.info("Starting polling...")
    await dp.start_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Error running bot: {e}") 