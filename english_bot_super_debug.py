# encoding: utf-8
import os
import json
import time
import random
import logging
import asyncio
import signal
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiohttp import web

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_super_debug.log')
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_PUBLIC_URL")
PORT = int(os.getenv("PORT", 8000))

logger.info("=" * 60)
logger.info("üöÄ BOT STARTUP - SUPER DEBUG MODE")
logger.info("=" * 60)

logger.info(f"üîß Environment variables:")
logger.info(f"  - API_TOKEN: {'‚úÖ Set (' + API_TOKEN[:10] + '...)' if API_TOKEN else '‚ùå Missing'}")
logger.info(f"  - RAILWAY_URL: {'‚úÖ Set (' + RAILWAY_URL + ')' if RAILWAY_URL else '‚ùå Missing'}")
logger.info(f"  - PORT: {PORT}")

if not API_TOKEN:
    logger.error("‚ùå TELEGRAM_API_TOKEN is missing! Exiting.")
    exit(1)

if not RAILWAY_URL:
    logger.error("‚ùå RAILWAY_PUBLIC_URL is missing! Exiting.")
    exit(1)

logger.info("‚úÖ Environment variables check passed")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = Bot(token=API_TOKEN)
    Bot.set_current(bot)
    dp = Dispatcher(bot)
    Dispatcher.set_current(dp)
    logger.info("‚úÖ Bot and Dispatcher initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Error initializing bot: {e}", exc_info=True)
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def load_basic_data():
    try:
        with open("main_menu_structure.json", "r", encoding="utf-8") as f:
            main_menu_data = json.load(f)
            logger.info(f"‚úÖ Loaded main_menu_structure.json with {len(main_menu_data)} sections")
            return main_menu_data
    except Exception as e:
        logger.error(f"‚ùå Error loading main_menu_structure.json: {e}")
        return {}

main_menu_data = load_basic_data()

def build_main_menu(data: dict) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    for item_key, item_value in data.items():
        button_text = item_value.get("title", item_key)
        markup.add(KeyboardButton(text=button_text))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    logger.info("=" * 40)
    logger.info(f"üéØ START COMMAND RECEIVED")
    logger.info(f"  - User ID: {message.from_user.id}")
    logger.info(f"  - Chat ID: {message.chat.id}")
    logger.info(f"  - Message text: '{message.text}'")
    logger.info(f"  - Message date: {message.date}")
    logger.info("=" * 40)
    
    try:
        chat_id = message.chat.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        response = await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        logger.info(f"‚úÖ Simple response sent to chat_id: {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        markup = build_main_menu(main_menu_data)
        response2 = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)
        logger.info(f"‚úÖ Menu response sent to chat_id: {chat_id}")
        
        return response
    except Exception as e:
        logger.error(f"‚ùå Error in start command: {e}", exc_info=True)
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception as e2:
            logger.error(f"‚ùå Error sending error message: {e2}")

@dp.message_handler(commands=["test"])
async def test_command(message: types.Message):
    logger.info(f"üß™ TEST COMMAND RECEIVED from user {message.from_user.id}")
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@dp.message_handler(commands=["ping"])
async def ping_command(message: types.Message):
    logger.info(f"üèì PING COMMAND RECEIVED from user {message.from_user.id}")
    await message.answer("üèì Pong! –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç!")

@dp.message_handler(commands=["status"])
async def status_command(message: types.Message):
    logger.info(f"üìä STATUS COMMAND RECEIVED from user {message.from_user.id}")
    
    status_info = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**
‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(main_menu_data)}
üåê Webhook URL: {RAILWAY_URL}/webhook
‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}
üîß –†–µ–∂–∏–º: SUPER DEBUG
"""
    await message.answer(status_info, parse_mode="Markdown")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    logger.info(f"üìù TEXT MESSAGE RECEIVED: '{message.text}' from user {message.from_user.id}")
    
    if message.text.startswith('/'):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    else:
        await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def handle_webhook(request):
    logger.info("=" * 50)
    logger.info(f"üì° WEBHOOK RECEIVED")
    logger.info(f"  - Method: {request.method}")
    logger.info(f"  - Path: {request.path}")
    logger.info(f"  - Headers: {dict(request.headers)}")
    logger.info("=" * 50)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.read()
        logger.info(f"üì° Request body length: {len(body)} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–ª–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not body:
            logger.error("‚ùå Empty request body")
            return web.Response(status=400, text="Empty request body")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            update_data = await request.json()
            logger.info(f"üì° Update data: {json.dumps(update_data, indent=2)}")
        except Exception as json_error:
            logger.error(f"‚ùå JSON parsing error: {json_error}")
            logger.error(f"üì° Raw body: {body.decode('utf-8', errors='ignore')}")
            return web.Response(status=400, text=f"JSON parsing error: {str(json_error)}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = types.Update.to_object(update_data)
        logger.info(f"üì° Update object created successfully")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
        await dp.process_update(update)
        logger.info("‚úÖ Webhook processed successfully")
        
        return web.Response(text="ok", status=200)
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        return web.Response(status=500, text=f"error: {str(e)}")

async def keep_alive_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    counter = 0
    while True:
        counter += 1
        logger.info(f"üîÑ Bot is alive and running (heartbeat #{counter})")
        await asyncio.sleep(60)

async def on_startup(app):
    logger.info("=" * 60)
    logger.info("üöÄ STARTUP SEQUENCE BEGINNING")
    logger.info("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ Bot info: @{bot_info.username} ({bot_info.first_name})")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.delete_webhook()
        logger.info("üóëÔ∏è Deleted old webhook")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        clean_url = RAILWAY_URL.rstrip('/')
        webhook_url = f"{clean_url}/webhook"
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Set webhook to: {webhook_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        logger.info(f"üì° Webhook info:")
        logger.info(f"  - URL: {webhook_info.url}")
        logger.info(f"  - Pending updates: {webhook_info.pending_update_count}")
        logger.info(f"  - Has custom certificate: {webhook_info.has_custom_certificate}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("test", "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"),
            BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ])
        logger.info("‚úÖ Bot commands set")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –∑–∞–¥–∞—á—É
        asyncio.create_task(keep_alive_task())
        
        logger.info("‚úÖ Bot started successfully!")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå Error during startup: {e}", exc_info=True)

async def on_shutdown(app):
    logger.info("üõë Shutting down bot...")
    await bot.delete_webhook()
    session = await bot.get_session()
    if session and not session.closed: 
        await session.close()
    logger.info("‚úÖ Bot shutdown complete")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = web.Application()

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/health", lambda r: web.Response(text="OK"))
app.router.add_get("/", lambda r: web.Response(text="Bot is running"))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üì° Received signal {signum}, shutting down gracefully...")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        logger.info("üöÄ Starting bot application...")
        web.run_app(app, host="0.0.0.0", port=PORT)
    except Exception as e:
        logger.error(f"‚ùå Application error: {e}", exc_info=True) 