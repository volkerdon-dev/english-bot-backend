#!/usr/bin/env python3
# encoding: utf-8
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
def load_main_menu_data():
    try:
        with open("main_menu_structure.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"Error loading main_menu_structure.json: {e}")
        return {}

def build_main_menu(data: dict) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    for item_key, item_value in data.items():
        button_text = item_value.get("title", item_key)
        markup.add(KeyboardButton(text=button_text))
    return markup

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def test_start_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    main_menu_data = load_main_menu_data()
    if not main_menu_data:
        logging.error("‚ùå Failed to load main_menu_data")
        return False
    
    logging.info(f"‚úÖ Loaded main_menu_data with {len(main_menu_data)} sections")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        markup = build_main_menu(main_menu_data)
        logging.info("‚úÖ Successfully built main menu markup")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–∞—Ö
        for row in markup.keyboard:
            for button in row:
                logging.info(f"  - Button: {button.text}")
        
        return True
    except Exception as e:
        logging.error(f"‚ùå Error building main menu: {e}")
        return False

async def test_message_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = types.Message(
        message_id=1,
        date=1234567890,
        chat=types.Chat(id=123456789, type="private"),
        from_user=types.User(id=123456789, is_bot=False, first_name="Test"),
        text="/start"
    )
    
    logging.info(f"üìù Test message: {test_message.text}")
    logging.info(f"üìù Chat ID: {test_message.chat.id}")
    logging.info(f"üìù From user: {test_message.from_user.first_name if test_message.from_user else 'Unknown'}")
    
    return True

async def main():
    logging.info("üöÄ Starting start command test...")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ–Ω—é
    if await test_start_handler():
        logging.info("‚úÖ Start handler test passed!")
    else:
        logging.error("‚ùå Start handler test failed!")
        return
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if await test_message_processing():
        logging.info("‚úÖ Message processing test passed!")
    else:
        logging.error("‚ùå Message processing test failed!")
        return
    
    logging.info("‚úÖ All tests passed!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 