# encoding: utf-8
import os
import json
import time
import random
import logging
import asyncio
import signal
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiohttp import web

from telegraph_utils import create_telegraph_page_for_verbs

# –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_debug.log')
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_PUBLIC_URL")
PORT = int(os.getenv("PORT", 8000))

logger.info(f"üîß Environment variables:")
logger.info(f"  - API_TOKEN: {'‚úÖ Set' if API_TOKEN else '‚ùå Missing'}")
logger.info(f"  - RAILWAY_URL: {'‚úÖ Set' if RAILWAY_URL else '‚ùå Missing'}")
logger.info(f"  - PORT: {PORT}")

if not API_TOKEN:
    logger.error("‚ùå TELEGRAM_API_TOKEN is missing! Exiting.")
    exit(1)

if not RAILWAY_URL:
    logger.error("‚ùå RAILWAY_PUBLIC_URL is missing! Exiting.")
    exit(1)

bot = Bot(token=API_TOKEN)
Bot.set_current(bot)
dp = Dispatcher(bot)
Dispatcher.set_current(dp)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
main_menu_data, grammar_data, ielts_tests_data, words_of_the_day_data = {}, {}, {}, []
vocabulary_topic_packs_data, idioms_phrasal_verbs_data, collocations_data, synonyms_antonyms_data = {}, {}, {}, {}
irregular_verbs_data = []
games_data = {}

# –ù–û–í–´–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ö–û–ù–¢–ï–ù–¢–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô
tenses_drills_data = {}
parts_of_speech_drills_data = {}
sentence_structure_drills_data = {}
constructions_drills_data = {}
common_mistakes_drills_data = {}

vocabulary_quizzes_data = {}
sentence_building_data = {}
listening_comprehension_data = {}
daily_challenges_data = {}

def load_data():
    global main_menu_data, grammar_data, ielts_tests_data, words_of_the_day_data, vocabulary_topic_packs_data
    global idioms_phrasal_verbs_data, collocations_data, synonyms_antonyms_data, irregular_verbs_data, games_data
    global tenses_drills_data, parts_of_speech_drills_data, sentence_structure_drills_data, constructions_drills_data, common_mistakes_drills_data
    global vocabulary_quizzes_data, sentence_building_data, listening_comprehension_data, daily_challenges_data

    files_to_load = {
        "main_menu_data": "main_menu_structure.json", "grammar_data": "grammar_categories_tree.json",
        "ielts_tests_data": "ielts_practice_tests.json", "words_of_the_day_data": "words_of_the_day.json",
        "vocabulary_topic_packs_data": "vocabulary_topic_packs.json", "idioms_phrasal_verbs_data": "idioms_phrasal_verbs.json",
        "collocations_data": "collocations.json", "synonyms_antonyms_data": "synonyms_antonyms.json",
        "irregular_verbs_data": "irregular_verbs.json", "games_data": "games.json",
        "tenses_drills_data": "exercises_data/general_practice/tenses_drills.json",
        "parts_of_speech_drills_data": "exercises_data/general_practice/parts_of_speech_drills.json",
        "sentence_structure_drills_data": "exercises_data/general_practice/sentence_structure_drills.json",
        "constructions_drills_data": "exercises_data/general_practice/constructions_drills.json",
        "common_mistakes_drills_data": "exercises_data/general_practice/common_mistakes_drills.json",
        "vocabulary_quizzes_data": "exercises_data/general_practice/vocabulary_quizzes.json",
        "sentence_building_data": "exercises_data/interactive_challenges/sentence_building.json",
        "listening_comprehension_data": "exercises_data/interactive_challenges/listening_comprehension.json",
        "daily_challenges_data": "exercises_data/daily_challenges.json",
    }
    
    loaded_count = 0
    for var_name, filename in files_to_load.items():
        try:
            with open(filename, "r", encoding="utf-8") as f:
                globals()[var_name] = json.load(f)
                loaded_count += 1
                logger.info(f"‚úÖ Loaded {filename}")
        except Exception as e:
            logger.error(f"‚ùå Error loading {filename}: {e}")

    logger.info(f"üìä Loaded {loaded_count}/{len(files_to_load)} data files")

load_data()

user_paths = {}
user_state = {}
irregular_verbs_telegraph_url = None

# Helper to escape Telegram Markdown special characters
def escape_markdown(text: str) -> str:
    """Escape Markdown special characters for Telegram."""
    for ch in "_*`":
        text = text.replace(ch, f"\\{ch}")
    return text

def build_main_menu(data: dict) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    for item_key, item_value in data.items():
        button_text = item_value.get("title", item_key)
        markup.add(KeyboardButton(text=button_text))
    return markup

def build_menu_from_dict(data: dict) -> ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for key, item_value in data.items():
        if not isinstance(item_value, (dict, list)): continue
        item_title = item_value.get("title", key) if isinstance(item_value, dict) else key
        markup.add(KeyboardButton(text=item_title))
    markup.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    logger.info(f"üéØ Start command received from user {message.from_user.id} (chat_id: {message.chat.id})")
    try:
        chat_id = message.chat.id
        user_paths[chat_id] = []
        user_state[chat_id] = {}
        logger.info(f"‚úÖ User paths and state initialized for chat_id: {chat_id}")
        
        response = await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=build_main_menu(main_menu_data))
        logger.info(f"‚úÖ Start message sent successfully to chat_id: {chat_id}")
        return response
    except Exception as e:
        logger.error(f"‚ùå Error in start command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message_handler(commands=["test"])
async def test_command(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info(f"üß™ Test command received from user {message.from_user.id}")
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

@dp.message_handler(commands=["status"])
async def status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    logger.info(f"üìä Status command received from user {message.from_user.id}")
    
    status_info = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**
‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(main_menu_data)} —Ä–∞–∑–¥–µ–ª–æ–≤
üåê Webhook URL: {RAILWAY_URL}/webhook
‚è∞ –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}
"""
    await message.answer(status_info, parse_mode="Markdown")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üìù Text message received: '{message.text}' from user {message.from_user.id}")
    
    if message.text == "/start":
        await start(message)
    elif message.text == "/test":
        await test_command(message)
    elif message.text == "/status":
        await status_command(message)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle_webhook(request):
    logger.info(f"üì° Webhook received: {request.method} {request.path}")
    try:
        update_data = await request.json()
        logger.info(f"üì° Update data: {update_data}")
        
        update = types.Update.to_object(update_data)
        await dp.process_update(update)
        logger.info("‚úÖ Webhook processed successfully")
        return web.Response(text="ok")
    except Exception as e:
        logger.error(f"‚ùå Error processing webhook: {e}", exc_info=True)
        return web.Response(status=500)

async def keep_alive_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    while True:
        logger.info("üîÑ Bot is alive and running")
        await asyncio.sleep(60)

async def on_startup(app):
    logger.info("üöÄ Starting bot application...")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.delete_webhook()
        logger.info("üóëÔ∏è Deleted old webhook")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        clean_url = RAILWAY_URL.rstrip('/')
        webhook_url = f"{clean_url}/webhook"
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Set webhook to: {webhook_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await bot.get_webhook_info()
        logger.info(f"üì° Webhook info: {webhook_info.url}")
        logger.info(f"üì° Pending updates: {webhook_info.pending_update_count}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("test", "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ])
        logger.info("‚úÖ Bot commands set")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –∑–∞–¥–∞—á—É
        asyncio.create_task(keep_alive_task())
        
        logger.info("‚úÖ Bot started successfully!")
        
    except Exception as e:
        logger.error(f"‚ùå Error during startup: {e}", exc_info=True)

async def on_shutdown(app):
    logger.info("üõë Shutting down bot...")
    await bot.delete_webhook()
    session = await bot.get_session()
    if session and not session.closed: 
        await session.close()
    logger.info("‚úÖ Bot shutdown complete")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/health", lambda r: web.Response(text="OK"))
app.router.add_get("/", lambda r: web.Response(text="Bot is running"))

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"üì° Received signal {signum}, shutting down gracefully...")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        logger.info("üöÄ Starting bot application...")
        web.run_app(app, host="0.0.0.0", port=PORT)
    except Exception as e:
        logger.error(f"‚ùå Application error: {e}", exc_info=True) 